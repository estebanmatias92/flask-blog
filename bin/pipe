#!/bin/bash

#
# Constants
#
# Source and Binary paths
BINPATH="${VENVPATH}/bin"
# Dependency file paths
REQSDEVPATH="${ROOTDIR}/requirements"
REQSFILE="requirements.txt"
# Cache
CACHEDIR="${SRCDIR}/__pycache__"


#
# Usage data display
#
__manager_sub_help() {
    # Colors
    local GREEN=$(tput -Txterm setaf 2)
    local YELLOW=$(tput -Txterm setaf 3)
    local WHITE=$(tput -Txterm setaf 7)
    local RESET=$(tput -Txterm sgr0)

    # Alias
    local command=${YELLOW}${progname}${RESET}

    # Displaying the message
    echo ""
    echo "Usage:"
    echo "    ${command} <command>"
    echo ""
    echo "Commands:"
    echo "    build           Create the environment, installs the dependencies required and start the program"
    echo "    create_env      Create an isolated python environment (${VENVPATH}) with pip"
    echo "    run             Run the program from the entrypoint with the isolated python binary"
    echo "    install         Install locally, the lastest version of depdendencies and update the requirements.txt file"
    echo "    update          Update the requirements.txt with modules imported in the project and updates all dependencies and reqs file"
    echo "    freeze          Update the requirements.txt file with the dependencies at the moment"
    echo "    clean           Remove __pycache__ and environment folders and files"
    echo "    uninstall       Uninstall all the environments and update the requirements.txt"
    echo "    remove          Runs '${command} uninstall && ${command} clean' at once"
    echo ""
}
export -f __manager_sub_help


#
# Create an isolated python environment (${VENVPATH}) with pip"
#
__manager_sub_build() {
    __manager_sub_create_env
    __manager_sub_install
    __manager_sub_run
}
export -f __manager_sub_build


#
# Create local python environment with pip
#
__manager_sub_create_env() {
    echo "Creating virtual environment"
    python3 -m pip install --upgrade pip
    python3 -m venv $VENVPATH
}
export -f __manager_sub_create_env


#
# Run the program from the entrypoint with the isolated python binary
#
__manager_sub_run() {
    "${ROOTDIR}/entrypoint.sh"
}
export -f __manager_sub_run


#
# Does three operations ar once
#
__manager_sub_install_update_freeze() {
    (. activate && pip install -U -r $REQSFILE && pip install -U -r $REQSDEVPATH/*) \
    && __manager_sub_freeze \
    && (. activate && pip list) 
}


#
# Install locally, the lastest version of depdendencies and update the requirements.txt file
#
__manager_sub_install() {
    echo "Installing dependencies"
    python -m pip install --upgrade pip \
        && (. activate && pip install pipreqs) \
        && __manager_sub_install_update_freeze
}
export -f __manager_sub_install


#
# Update the requirements.txt with modules imported in the project and updates all dependencies and reqs file
#
__manager_sub_update() {
    echo "Updating dependencies"
    (. activate && python -m pip install --upgrade pip \
        && pipreqs --force) \
        && __manager_sub_install_update_freeze
    
}
export -f __manager_sub_update


#
# Update the requirements.txt file with the dependencies at the moment
#
__manager_sub_freeze() {
    (. activate && pip freeze > $REQSFILE)
}
export -f __manager_sub_freeze


#
# Remove __pycache__ and environment folders and files
#
__manager_sub_clean() {
    echo "Removing venv cache files and folders"
    # Directory list
    local dirlist=($CACHEDIR $VENVPATH)

    # Iterate over the list and try to remove the directories
    for element in "${dirlist[@]}"; do
        if [ -d $element ]; then
            rm -rf $element
            echo "${element} removed."
        fi
    done
}
export -f __manager_sub_clean


#
# Uninstall all the environments and update the requirements.txt
#
__manager_sub_uninstall() {
    if [ -s $REQSFILE ]; then
        echo "Uninstalling all dependencies"
        
        (. activate && pip uninstall --no-cache-dir -y -r $REQSFILE)
        __manager_sub_freeze
        
        echo "Everything is uninstalled."
    fi
}
export -f __manager_sub_uninstall


#
# Runs '${command} uninstall && ${command} clean' at once"
#
__manager_sub_remove() {
    if [ "${VENVPATH}" != "" -a -d "${VENVPATH}" ]; then
        __manager_sub_uninstall
        __manager_sub_clean
    else
        echo "ERROR: Nothing to uninstall or remove."
    fi
}
export -f __manager_sub_remove


#
# Entrypoint for this script when it's called
#
. "`dirname $0`"/lib/runsub "$@"